{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","handleClick","bind","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","console","log","push","id","uuid","setState","st","setItem","stringify","alert","delta","sort","a","b","src","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a17cfde.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Joke.css';\n\nclass Joke extends Component {\n\n    getColor(){\n        if(this.props.votes >= 15){\n            return \"#4CAF50\";\n        } else if(this.props.votes >= 12){\n            return \"#8BC34A\";\n        } else if(this.props.votes >= 9){\n            return \"#CDDC39\";\n        } else if(this.props.votes >= 6) {\n            return \"#FFEB3B\";\n        } else if(this.props.votes >= 3) {\n            return \"#FFC107\";\n        } else if(this.props.votes >= 0) {\n            return \"#FF9800\";\n        } else {\n            return \"#f44336\";\n        }\n    }\n    \n    getEmoji() {\n        if(this.props.votes >= 15){\n            return \"em em-rolling_on_the_floor_laughing\";;\n        } else if(this.props.votes >= 12){\n            return \"em em-laughing\";\n        } else if(this.props.votes >= 9){\n            return \"em em-smiley\";\n        } else if(this.props.votes >= 6) {\n            return \"em em-slightly_smiling_face\";\n        } else if(this.props.votes >= 3) {\n            return \"em em-neutral_face\";\n        } else if(this.props.votes >= 0) {\n            return \"em em-confused\";\n        } else {\n            return \"em em-angry\";\n        }\n    }\n    \n    \n    \n    \n    \n    \n\n    render() {\n        return (\n            <div className=\"Joke\">\n                <div className=\"Joke-buttons\">\n                    <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\n                    <span style={{borderColor: this.getColor()}} className=\"Joke-votes\">{this.props.votes}</span>\n                    <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\n                </div> \n                <div className=\"Joke-text\">{this.props.text}</div>\n                <div className=\"Joke-smiley\">\n                <i className={this.getEmoji()}></i>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Joke;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport uuid from 'uuid/dist/v4'\nimport './JokeList.css';\n\n\nclass JokeList extends Component {\n    static defaultProps = {\n        numJokesToGet: 10\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n            loading: false\n        }\n        this.seenJokes = new Set(this.state.jokes.map( j => j.text ));\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        if(this.state.jokes.length === 0) this.getJokes();\n    }\n\n    async getJokes(){\n        try {\n            let jokes = [];\n            while(jokes.length < this.props.numJokesToGet){\n                let res = await axios.get(\"https://icanhazdadjoke.com/\", {\n                headers: { Accept: \"application/json\"}\n                });\n                let newJoke = res.data.joke;\n                if(!this.seenJokes.has(newJoke)){\n                    jokes.push({ id: uuid(), text: newJoke, votes: 0});\n                } else {\n                    console.log(\"FOUND A DUPLICATE!!!\");\n                    console.log(newJoke);\n                }\n            }        \n            this.setState(\n                st => ({\n                    loading: false,\n                    jokes: [...st.jokes, ...jokes]\n                }),\n                () => \n                window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n            );\n        } catch (e) {\n            alert(e);\n            this.setState({ loading: false });\n        }\n    }\n\n    handleVote(id, delta){\n        this.setState(\n            st => ({\n                jokes: st.jokes.map( \n                    joke => joke.id === id \n                    ? \n                    { ...joke, votes: joke.votes + delta } \n                    : \n                    joke\n                )\n            }),\n            () => \n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n        );\n    } \n\n    handleClick(){\n        this.setState({ loading: true }, this.getJokes);\n    }\n\n    render(){\n        if(this.state.loading){\n            return (\n                <div className=\"JokeList-loadingSpinner\">\n                    <i className=\"far fa-8x fa-laugh fa-spin\" />\n                    <h1 className=\"JokeList-title\">Loading...</h1>\n                </div>\n            );\n        }\n\n        let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes);\n\n        return (\n            <div className=\"JokeList\">\n            <div className=\"JokeList-sidebar\">\n                <h1 className=\"JokeList-title\">\n                    <span>Dad</span> Jokes!\n                </h1>\n                <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" />\n                <button className=\"JokeList-getMore\" onClick={this.handleClick}>Fetch Jokes</button>\n            </div>\n                <div className=\"JokeList-jokes\">\n                    {jokes.map( joke => ( \n                        <Joke \n                            key={joke.id} \n                            votes={joke.votes} \n                            text={joke.text}\n                            upvote={() => this.handleVote(joke.id, 1)}\n                            downvote={() => this.handleVote(joke.id, -1)}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default JokeList;","import React from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}